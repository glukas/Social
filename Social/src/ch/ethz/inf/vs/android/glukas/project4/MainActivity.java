package ch.ethz.inf.vs.android.glukas.project4;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import ch.ethz.inf.vs.android.glukas.project4.RegistrationDialogFragment.RegistrationDialogFragmentDelegate;import ch.ethz.inf.vs.android.glukas.project4.database.DatabaseAccess;import ch.ethz.inf.vs.android.glukas.project4.database.DatabaseManager;import ch.ethz.inf.vs.android.glukas.project4.exceptions.FailureReason;import ch.ethz.inf.vs.android.glukas.project4.networking.FriendshipRequest;import ch.ethz.inf.vs.android.glukas.project4.protocol.Protocol;import ch.ethz.inf.vs.android.glukas.project4.protocol.ProtocolInterface;import ch.ethz.inf.vs.android.glukas.project4.protocol.parsing.MessageParser;import ch.ethz.inf.vs.android.glukas.project4.security.NetworkMessage;import ch.ethz.inf.vs.android.glukas.project4.security.SecureChannelDelegate;import ch.ethz.inf.vs.android.glukas.project4.security.ZeroCredentialStorage;//TODO TESTINGimport ch.ethz.inf.vs.android.glukas.project4.test.Data;import ch.ethz.inf.vs.android.glukas.project4.test.StaticDatabase;import ch.ethz.inf.vs.android.glukas.project4.test.StaticSecureChannel;import android.annotation.SuppressLint;import android.app.ActionBar;import android.app.ActionBar.Tab;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.DialogFragment;import android.app.Fragment;import android.app.FragmentTransaction;import android.app.ListFragment;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.net.Uri;import android.nfc.NdefMessage;import android.nfc.NfcAdapter;import android.nfc.NfcAdapter.OnNdefPushCompleteCallback;import android.nfc.NfcEvent;import android.os.Bundle;import android.os.Environment;import android.os.Parcelable;import android.provider.MediaStore;import android.text.Editable;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnFocusChangeListener;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;@SuppressLint("ValidFragment")public class MainActivity extends Activity implements OnNdefPushCompleteCallback, UserDelegate, RegistrationDialogFragmentDelegate {	private static final String tag = "MAIN_ACTIVITY";	private static final int PICTURE_GALLERY = 1;	private static final int PICTURE_TAKEN = 2;	NfcAdapter nfcAdapter;	FriendshipRequest nextRequest;	ProtocolInterface mProtocol;	WallPostAdapter userWallAdapter;	EditText textField;	//TODO Once testing is done, change DatabaseManager to DatabaseAccess	DatabaseManager dbmanager;	// TODO Remove the section below	// Workaround for dbmanager not returning users:	private List<BasicUser> userList = Arrays.asList((BasicUser)new User("Alice"), new User("Bob"), new User("Carol"), new User("David"));	// Workaround for dbmanager not returning posts:	private List<Post> postList = Arrays.asList(new Post(4, new UserId(), new UserId(), "Hello World!", null, null), new Post(0, new UserId(), new UserId(), "Amazing app!!", null, null) );	// TODO Remove the section above	private FriendListAdapter friendListAdapter;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.home_screen);		dbmanager = new DatabaseManager(this);		//Protocol instantiation		mProtocol = Protocol.getInstance(dbmanager);		mProtocol.setDelegate(this);		setUpNFCExchange();		//set up views		ActionBar actionBar = getActionBar();
		actionBar.setDisplayShowHomeEnabled(false);
		actionBar.setDisplayShowTitleEnabled(false);		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);		ActionBar.Tab tab1 = actionBar.newTab().setText("My Wall");		ActionBar.Tab tab2 = actionBar.newTab().setText("View Friends");		//ActionBar.Tab tab3 = actionBar.newTab().setText("Add Friend");		userWallAdapter = new WallPostAdapter(getApplicationContext(), new ArrayList<Post>());		WallFragment wallFragment = new WallFragment();		wallFragment.setListAdapter(userWallAdapter);		tab1.setTabListener(new MyTabListener(wallFragment));		friendListAdapter = new FriendListAdapter(this, userList);		FriendListFragment friendListFragment = new FriendListFragment();		friendListFragment.setListAdapter(friendListAdapter);		tab2.setTabListener(new MyTabListener(friendListFragment));		//tab3.setTabListener(new MyTabListener(new AddFriendFragment()));		actionBar.addTab(tab1);		actionBar.addTab(tab2);		//actionBar.addTab(tab3);		for (BasicUser friend : userList) {			dbmanager.putFriend((User)friend);		}	}	////	//Posting to wall	////	@SuppressWarnings("unused")	public void sendPost (View v) {		Editable post = textField.getText();		Log.d(tag, post.toString());		textField.setText("");		textField.clearFocus();	}	@SuppressWarnings("unused")	public void addPicture (View v) {		final CharSequence[] options = { "Take Photo", "Choose from Gallery","Cancel" };		AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);		builder.setTitle("Add Photo!");		builder.setItems(options, new DialogInterface.OnClickListener() {			@Override			public void onClick(DialogInterface dialog, int item) {				if (options[item].equals("Take Photo"))				{					Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);					File f = new File(Environment.getExternalStorageDirectory(), "temp.jpg");					intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f));					startActivityForResult(intent, PICTURE_TAKEN);				}				else if (options[item].equals("Choose from Gallery"))				{					Intent intent = new   Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);					startActivityForResult(intent, PICTURE_GALLERY);				}				else if (options[item].equals("Cancel")) {					dialog.dismiss();				}			}		});		builder.show();	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		if (resultCode == RESULT_OK) {			if (requestCode == PICTURE_TAKEN) {				File f = new File(Environment.getExternalStorageDirectory().toString());				for (File temp : f.listFiles()) {					if (temp.getName().equals("temp.jpg")) {						f = temp;						break;					}				}				try {					Bitmap bitmap;					BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();					bitmap = BitmapFactory.decodeFile(f.getAbsolutePath(),							bitmapOptions); 										bitmap = Bitmap.createScaledBitmap(bitmap, 												textField.getWidth() - 40,												(int)(bitmap.getHeight() * ((float)((textField.getWidth() - 20))/bitmap.getWidth())), 												false);										bitmap = getRoundedCornerBitmap(bitmap);										Drawable drawable = new BitmapDrawable(getApplicationContext().getResources(), bitmap);										textField.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);					//bitmap.recycle();										f.delete();					// left out for now, we simply delete the taken picture.//					String path = android.os.Environment//							.getExternalStorageDirectory()//							+ File.separator//							+ "Phoenix" + File.separator + "default";//					OutputStream outFile = null;//					File file = new File(path, String.valueOf(System.currentTimeMillis()) + ".jpg");//					try {//						outFile = new FileOutputStream(file);//						bitmap.compress(Bitmap.CompressFormat.JPEG, 85, outFile);//						outFile.flush();//						outFile.close();//					} catch (FileNotFoundException e) {//						e.printStackTrace();//					} catch (IOException e) {//						e.printStackTrace();//					} catch (Exception e) {//						e.printStackTrace();//					}				} catch (Exception e) {					e.printStackTrace();				}			} else if (requestCode == PICTURE_TAKEN) {				Uri selectedImage = data.getData();				String[] filePath = { MediaStore.Images.Media.DATA };				Cursor c = getContentResolver().query(selectedImage,filePath, null, null, null);				c.moveToFirst();				int columnIndex = c.getColumnIndex(filePath[0]);				String picturePath = c.getString(columnIndex);				c.close();				Bitmap thumbnail = (BitmapFactory.decodeFile(picturePath));				Log.w("path of image from gallery......******************.........", picturePath+"");				textField.setText("viewImage.setImageBitmap(thumbnail);");			}		}	}   	////	//NFC (Friendship Request)	////	private void setUpNFCExchange() {		nfcAdapter = NfcAdapter.getDefaultAdapter(this);		if (nfcAdapter == null) {			Toast.makeText(this, "NFC is not available", Toast.LENGTH_LONG)			.show();			finish();			return;		}		createNextRequest();	}	private void createNextRequest() {		nextRequest = new FriendshipRequest(dbmanager.getUser());		nfcAdapter.setNdefPushMessageCallback(nextRequest, this);		nfcAdapter.setOnNdefPushCompleteCallback(this, this);	}	////	//OnNdefPushCompleteCallback	////	@Override	public void onNdefPushComplete(NfcEvent event) {		Log.d(this.getClass().toString(), "onNdefPushComplete");		FriendshipRequest.setCurrentRequest(nextRequest);		createNextRequest();	}	////	//LIFECYCLE	////	@Override	protected void onPause() {		super.onPause();	}	@Override	protected void onResume() {		super.onResume();		checkUserRegistered();		updateWall();		//TESTING		//tests insertion of posts into wall		int index = new UserId().getId().shortValue();		//mProtocol.postPost(new Post(index, new UserId("1234"), new UserId("1234"), String.format("post with id : %d", index), null, null));		Bitmap icon = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);		icon = Bitmap.createScaledBitmap(icon, 500, 500, false);		Post imagePost = new Post(index, new User("Alice").getId(), new User("Alice").getId(), "Testing image.. and now with a much longer text to see how it breaks onto the next line and stuff.. %id : " + index, icon, null);		//this.userWallAdapter.add(imagePost);	}	private void updateWall() {		//if (mProtocol.getUser() != null) {		//mProtocol.getSomeUserPosts(new UserId("1234"), 20, Integer.MAX_VALUE);		//}	}	private void checkUserRegistered() {		if(mProtocol.getUser() == null) {			Log.d(tag, "No user registered");			// Create registration dialog			RegistrationDialogFragment dialog = new RegistrationDialogFragment(this);			dialog.setCancelable(false);
			dialog.show(this.getFragmentManager(), "lol");		} else {			Log.d(tag, "User " + dbmanager.getUser().username +" already registered");		}	}	////	//Fragment	///	public class WallFragment extends ListFragment {		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){			View view = inflater.inflate(R.layout.my_wall_tab, container, false);			textField = (EditText) view.findViewById(R.id.text);			textField.setOnFocusChangeListener(new OnFocusChangeListener() {          		        public void onFocusChange(View v, boolean hasFocus) {		            if (!hasFocus) {		            	InputMethodManager imm = (InputMethodManager)getSystemService(		        				Context.INPUT_METHOD_SERVICE);		        		imm.hideSoftInputFromWindow(textField.getWindowToken(), 0);		            }		        }		    });			return view;		}	}	public class FriendListFragment extends ListFragment {		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){			View view = inflater.inflate(R.layout.friend_list_tab, container, false);			return view;		}		@Override		public void onListItemClick (ListView l, View v, int position, long id) {			Intent contactDetail = new Intent(getActivity(), ContactDetailActivity.class);			BasicUser friend = ((BasicUser)this.getListAdapter().getItem(position));			Log.d(this.getClass().toString(), "clicked on user " + friend +" id : " + friend.getId());			contactDetail.putExtra(ContactDetailActivity.USERID_EXTRA, friend.id.getBytes());			startActivity(contactDetail);		}	}	public class AddFriendFragment extends Fragment {		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){			View view = inflater.inflate(R.layout.add_friend_tab, container, false);			return view;		}	}	public class ToDoFragment extends Fragment {		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){			View view = inflater.inflate(R.layout.todo_tab, container, false);			return view;		}	}	public class MyTabListener implements ActionBar.TabListener {		Fragment fragment;		public MyTabListener(Fragment fragment) {			this.fragment = fragment;		}		public void onTabSelected(Tab tab, FragmentTransaction ft) {			ft.replace(R.id.home_screen, fragment);		}		public void onTabUnselected(Tab tab, FragmentTransaction ft) {			ft.remove(fragment);		}		public void onTabReselected(Tab tab, FragmentTransaction ft) {			// nothing done here		}	}	////	//UserDelegate	////	@Override	public void onPostReceived(Post post) {		// TODO Discuss if this method can be non-blocking (Samuel) or if it has to be called asynch (Vincent)		// or if the lower components already calls the method asynch (Lukas - Mathias)		//TODO only add if it belongs to this users wall				this.userWallAdapter.add(post);	}	@Override	public void onConnectionFailed(FailureReason reason) {		// TODO @Samuel, from Vincent Is it of any use for you?		}	////	//	RegistrationDialogFragmentDelegate	////	@Override	public void onUserRegistered(String username) {		this.dbmanager.putUser(new User(username));	}		////	// Helper functions	////		private static Bitmap getRoundedCornerBitmap(Bitmap bitmap) {        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),            bitmap.getHeight(), Config.ARGB_8888);        Canvas canvas = new Canvas(output);        final int color = 0xff424242;        final Paint paint = new Paint();        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());        final RectF rectF = new RectF(rect);        final float roundPx = 20;        paint.setAntiAlias(true);        canvas.drawARGB(0, 0, 0, 0);        paint.setColor(color);        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));        canvas.drawBitmap(bitmap, rect, rect, paint);        return output ;      } }
